/* 
 This file was generated by Dashcode and is covered by the 
 license.txt included in the project.  You may edit this file, 
 however it is recommended to first turn off the Dashcode 
 code generator otherwise the changes will be lost.
 */

if (!window.dashcode) {
    dashcode = {};
};

//
// createInstancePreferenceKey(key)
// Returns a unique preference key that is based on a instance of an opened widget.
// The returned value can then be used in widget.setPreferenceForKey()
// and widget.preferenceForKey() so that the value that is set or retrieved is
// only for a particular opened widget.
//
// key: preference key
//
dashcode.createInstancePreferenceKey = function (key) {
    return widget.identifier + "-" + key;
};

//
// getElementHeight(mainElement)
// Get the height of a part even if it's hidden (by 'display: none').
//
// mainElement: Part element
//
dashcode.getElementHeight = function (mainElement) {
    var height = mainElement.offsetHeight;
    
    if (!height || height == 0) {
        height = dashcode.getElementSize(mainElement).height;
    }
    
    return height;
};

//
// getElementWidth(mainElement)
// Get the width of a part even if it's hidden (by 'display: none').
//
// mainElement: Part element
//
dashcode.getElementWidth = function (mainElement) {
    var width = mainElement.offsetWidth;
    
    if (!width || width == 0) {
        width = dashcode.getElementSize(mainElement).width;
    }
    
    return width;
};

//
// getElementSize(mainElement)
// Get the size of a DOM element even if it's hidden (by 'display: none').
//
// mainElement: DOM element
//
dashcode.getElementSize = function (mainElement) {
    var sizes = dashcode.getElementSizesWithAncestor([mainElement], mainElement);
    return sizes[0];
};

//
// getElementSizesWithAncestor(elements, ancestor)
// Get the size of an array of DOM elements under a common ancestor even if they're hidden (by 'display: none').
//
// elements: Array of DOM element
// ancestor: Common DOM ancestor. 'display' will temporarily be flipped to 'block' for all hidden ancestors of this element.
//
dashcode.getElementSizesWithAncestor = function (elements, ancestor) {
    if (elements.length < 1) {
		return [];
	}

    var displayNoneElements = [];
    var width = elements[0].offsetWidth;
    
    if (!width || width == 0) {        
        var parentNode = ancestor;
        while (parentNode && (parentNode != document)) {
            var style = document.defaultView.getComputedStyle(parentNode, null);
            var displayValue = style ? style.getPropertyValue("display") : parentNode.style.display;        
            if ((style && displayValue == "none") || (!style && displayValue != "block")) {
                displayNoneElements.push({node:parentNode, display:parentNode.style.display});
                parentNode.style.display = "block";
            }
            parentNode = parentNode.parentNode;
        }
    }

    var sizes = [];    
    for (var i = 0; i < elements.length; i++) {
        sizes.push({width: elements[i].offsetWidth, height: elements[i].offsetHeight});
    }

    for (var j = 0; j < displayNoneElements.length; j++) {
        var element = displayNoneElements[j].node;
        element.style.display = displayNoneElements[j].display;
        // clean up
        if (element.getAttribute("style") == "") {
            element.removeAttribute("style");
        }
    }
    
    return sizes;
};

dashcode.getElementDocumentOffset = function(element)
{   
    var parent = element.offsetParent;
    var offset = {x:element.offsetLeft,y:element.offsetTop};
    
    if( parent ){
        var parentOffset = dashcode.getElementDocumentOffset(parent);
        
        offset.x += parentOffset.x;
        offset.y += parentOffset.y;
    }
    
    return offset;
};
